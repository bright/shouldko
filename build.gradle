buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    ext.kotlin_version = "1.2.30"
    ext.jupiter_version = "5.1.0"
    ext.hamcrest_version = "1.3"
}

plugins {
    id "nebula.dependency-lock" version "4.9.5"
    id "org.jetbrains.kotlin.jvm" version "1.2.10"
    id "org.junit.platform.gradle.plugin" version "1.0.1"
    id "com.jfrog.bintray" version "1.7.3"
    id "org.ajoberstar.grgit" version "1.7.2"
    id "org.ajoberstar.release-opinion" version "1.7.2"
}


allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }

    // required by junit platform runner
    apply plugin: 'kotlin'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'maven'

    dependencies {
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$jupiter_version")
    }

    group "pl.miensol.shouldko"
}

subprojects {
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

        testImplementation("org.junit.jupiter:junit-jupiter-api:$jupiter_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$jupiter_version")
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.6"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.6"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
}

apply plugin: 'maven-publish'



publishing {
    publications {
        hamcrest(MavenPublication) {
            def project = project(':hamcrest')
            from project.components.java
            artifact project.sourcesJar
            groupId group
            artifactId project.name
            version project.version
        }

        core(MavenPublication) {
            def project = project(':core')
            from project.components.java
            artifact project.sourcesJar
            groupId group
            artifactId project.name
            version project.version
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['core', 'hamcrest']
    pkg {
        repo = 'maven'
        name = 'shouldko'
        desc = 'Adds source line to tests assertion messages'
        userOrg = 'brightinventions'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/bright/shouldko.git'
        labels = ['tests', 'hamcrest', 'junit']
    }
}

afterEvaluate {
    tasks.bintrayUpload.doLast {
        logger.lifecycle("Uploaded artifacts to bintray at version $version")
    }
}